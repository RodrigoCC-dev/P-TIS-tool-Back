build:
  image: ruby:2.6.6
  cache:
    key: ptis-tool-back
    paths:
      - apt-cache
      - vendor/ruby
      - node_modules/
    policy: pull
  services:
    - postgres:10.14
  variables:
    POSTGRES_USER: root
    POSTGRES_PASSWORD: ''
    DB_USERNAME: root
    DB_PASSWORD: postgres
    DB_HOST: postgres
    POSTGRES_HOST_AUTH_METHOD: trust
    RAILS_ENV: production
    DISABLE_SPRING: 1
    BUNDLE_PATH: vendor/bundle
  stage: build
  script:
    - bundle install --deployment --without development test
    - SECRET_ENV_VAR=$(bundle exec rails secret)
    - echo -e "production:\n  secret_key_base:" > ./config/.example_secrets.yml
    - echo "$(cat ./config/.example_secrets.yml) $SECRET_ENV_VAR" > ./config/secrets.yml
    - cat ./config/secrets.yml
    - bundle exec rails db:create db:migrate db:seed RAILS_ENV=production --trace
    - bundle exec passenger start
  before_script:
    - export APT_CACHE_DIR=`pwd`/apt-cache && mkdir -pv $APT_CACHE_DIR
    - apt update -qq && apt -o dir::cache::archives="$APT_CACHE_DIR" install -yqq nodejs
    - gem install bundler --no-document
    - bundle install --jobs $(nproc) "${FLAGS[@]}" --path=vendor

minitest:
  image: ruby:2.6.6
  stage: test
  cache:
    key: ptis-tool-back
    paths:
      - apt-cache
      - vendor/ruby
      - node_modules/
    policy: pull-push
  services:
    - postgres:10.14
  variables:
    POSTGRES_USER: root
    POSTGRES_PASSWORD: ''
    DB_USERNAME: root
    DB_PASSWORD: postgres
    DB_HOST: postgres
    POSTGRES_HOST_AUTH_METHOD: trust
    RAILS_ENV: test
    DISABLE_SPRING: 1
    BUNDLE_PATH: vendor/bundle
  artifacts:
    name: coverage
    paths:
      - coverage/
  script:
    - bundle exec rails db:test:prepare
    - bundle exec rails test
  before_script:
    - export APT_CACHE_DIR=`pwd`/apt-cache && mkdir -pv $APT_CACHE_DIR
    - apt update -qq && apt -o dir::cache::archives="$APT_CACHE_DIR" install -yqq nodejs
    - gem install bundler --no-document
    - bundle install --jobs $(nproc) "${FLAGS[@]}" --path=vendor
    - bundle exec rails db:create db:migrate db:schema:load --trace

deploy:
  extends: build
  stage: deploy
  before_script:
    - apt-get update
    - apt-get install -yqq apt-transport-https ca-certificates curl gnupg-agent software-properties-common
    - curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -
    - add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable"
    - apt-get update
    - apt-get -yqq install docker-ce docker-ce-cli containerd.io
    - echo $CI_BUILD_TOKEN | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
  script:
    - echo "deploying to Docker start..."
    - docker build --pull -t "$CI_REGISTRY_IMAGE" .
    - docker push "$CI_REGISTRY_IMAGE"
